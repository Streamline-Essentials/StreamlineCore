buildscript {
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath("com.gradleup.shadow:shadow-gradle-plugin:8.3.6") // for shadowing
        classpath("io.freefair.gradle:lombok-plugin:8.6")
    }
}

//plugins {
//    id "maven-publish"
//}

allprojects {
    apply plugin: "java"
    apply plugin: "com.gradleup.shadow"
    apply plugin: "io.freefair.lombok"
    apply plugin: "maven-publish"

    version = rootProject.properties["version"]
    group = rootProject.properties["group"]

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    artifacts {
        archives shadowJar
    }

    repositories {
        // Maven Defaults
        mavenCentral()
        mavenLocal()
        maven { url "https://mvnrepository.com/artifact" }

        // JitPack
        maven { url "https://jitpack.io" }

        // Local libs folder as a flat directory repository
        flatDir {
            dirs "${rootDir}/libs"
        }
    }
}

subprojects {
    apply from: rootDir.toString() + "/dependencies.gradle"

    ext {
        pluginMain = rootProject.properties["plugin.main"] == "default" ?
                project.group.toString() + "." + project.name.toString().toLowerCase() + "." + project.name.toString() :
                properties["plugin.main"]
    }

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        // Spigot / Bukkit
        maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://oss.sonatype.org/content/repositories/central" }
        // Paper / Velocity
        maven {
            name = 'papermc'
            url = 'https://repo.papermc.io/repository/maven-public/'
        }
        // Fabric
        maven { url "https://maven.fabricmc.net" }
        maven { url "https://libraries.minecraft.net" }

        // OpenCollab
        maven {
            name "opencollabRepositoryMavenSnapshots"
            url "https://repo.opencollab.dev/maven-snapshots"
        }
        maven {
            name "opencollabRepositoryMavenReleases"
            url "https://repo.opencollab.dev/maven-releases"
        }

        // PlaceholderAPI
        maven { url "https://repo.extendedclip.com/content/repositories/placeholderapi" }

        // CodeMC
        maven { url "https://repo.codemc.io/repository/maven-releases/" }
        maven { url "https://repo.codemc.io/repository/maven-snapshots/" }
        maven { url "https://repo.codemc.io/repository/streamline-essentials/" }
    }

    processResources {
        // Debugging: Print values
        doFirst {
            println "Version: " + rootProject.version.toString() + ", Name: " + rootProject.name.toString() + ", Main: " + project.ext.pluginMain.toString()
        }

        inputs.property("name", rootProject.name.toString())
        inputs.property("version", rootProject.version.toString())
        inputs.property("main", project.ext.pluginMain.toString())
        outputs.dir(file("build/generated-src"))

        filesMatching("**/plugin.yml") {
            expand (
                    "name": rootProject.name.toString(),
                    "version": rootProject.version.toString(),
            )
        }
        filesMatching("**/velocity-plugin.json") {
            expand (
                    "name": rootProject.name.toString(),
                    "version": rootProject.version.toString(),
            )
        }
        filesMatching("**/streamline.properties") {
            expand (
                    "name": rootProject.name.toString(),
                    "version": rootProject.version.toString(),
            )
        }
        filesMatching("**/singularity.properties") {
            expand (
                    "name": rootProject.name.toString(),
                    "version": rootProject.version.toString(),
            )
        }
    }

    shadowJar {
        manifest {
            attributes(
                    "Implementation-Title": rootProject.name.toString(),
                    "Implementation-Version": rootProject.version.toString()
            )
        }

        relocate("com.github.Anon8281.universalScheduler", "host.plas.bou.libs.universalScheduler")
        relocate("ch.qos.logback", "host.plas.bou.libs.logback")

        archiveFileName = project.name + "-" + project.version + ".jar"

//        minimize()
    }

    tasks.register('deploy', Copy) {
        // Define the deployment directory
        def deployDir = file(System.getenv("DEPLOY_DIR") ?: "$rootDir/deploy")

        // Ensure the deployment directory exists
        doFirst {
            println "Deploying to: $deployDir"
            deployDir.mkdirs()
            println "Generated JAR file: ${shadowJar.archiveFile}"
        }

        // Copy the shadowJar output
        from shadowJar.archiveFile
        into deployDir
    }

    // Ensure that the deploy task runs after the shadowJar task
    shadowJar.finalizedBy(deploy)

    tasks.named('deploy').configure {
        dependsOn 'shadowJar', 'sourcesJar', 'javadocJar', 'jar'
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId project.group
                artifactId "$project.name"
                version project.version

                from components.java
            }
        }

        repositories {
            maven {
                url = "https://repo.codemc.io/repository/streamline-essentials/"

                def mavenUsername = System.getenv("JENKINS_NEXUS_USERNAME")
                def mavenPassword = System.getenv("JENKINS_NEXUS_PASSWORD")

                if (mavenUsername != null && mavenPassword != null) {
                    credentials {
                        username = mavenUsername
                        password = mavenPassword
                    }
                }
            }
        }
    }
}

tasks.register("clearDeploys", Delete) {
    // Define the deployment directory
    def deployDir = file(System.getenv("DEPLOY_DIR") ?: "$rootDir/deploy")

    deployDir.mkdirs()
    File[] files = deployDir.listFiles()
    if (files != null) {
        files.each { file ->
            if (file.isFile()) {
                file.delete()
            }
        }
    }
}

clean.finalizedBy(clearDeploys)
tasks.named('clearDeploys').configure {
    dependsOn 'clean'
}

clearDeploys.finalizedBy(build)
tasks.named("build").configure {
    doFirst {
        tasks.named('clean')
    }
}

build.finalizedBy(publish)
tasks.named("publish").configure {
    doFirst {
        tasks.named('build')
    }
}

wrapper {
    gradleVersion = "8.13"
    distributionType = Wrapper.DistributionType.ALL
}